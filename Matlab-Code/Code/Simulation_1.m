%%%%%%%%%%%%%%%%%%%%%%% Simultion 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Simultion 1: Propsed projection method VS traditional projection method
% Simultion 2: Proposed 3-steps method VS Traditional 3-steps phase-shifting method
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% N1 denotes total number of external phase-shifitng steps
% k1 denotes k1-th step of external phase-shifting
% N2 denotes total number of internal phase-shifitng steps
% k2 denotes the k2-th step of internal phase-shifting
% 5th harmonics is used to simulate errors resulting from non-linear systems
% internal phase-shifting is used to generate the camera image
% external phase-shifting used camera images to extrct wrapped phase
% Total number of projections is 120 in one exposure.
% Projeciton numbers of I_k1k2 are: 20,19,15,10,5,1,0,1,5,10,15,19, respectively;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%% Simulation 1: Comparison of projection methods
clc; clear; close all;
f = [1,3];          % fringe number
N1=3;               % total number of external phase-shifitng steps
N2=12;              % total number of internal phase-shifitng steps
c = 10;             % c denotes the scaling factor
k2=1:N2;            
Sk_ideal=c*(cos(2*(k2-1)*pi/N2)+1);   % Ideal projection number
Sk=round(Sk_ideal);                   % Actual projection number
Total_Projecion_number=sum(Sk);       % Total projection number in one exposure
fprintf("Projection number during one exposure : %d \n Projeciton number for 12 patterns : ",Total_Projecion_number);
fprintf("%d,", Sk);
A=0.5;              % background light intensity
B=0.4;              % modulation of light intensity
% Simulate high-order harmonics generated by non-linear systems
B_noise =0.1;       % The intensity of harmonic
order_noise=5;      % The order of harmonic
Height_img=500;  Width_img=600;
u=1:Width_img;
root_path='..\Image\Simulation\';

%%%%%%%%%%%% 一、Phase-shifting Superimposition projection (i.e.,Internal phase-shifting method) 
for id_f=1:length(f)
    for k1=1:1:N1
        figure;I_k1=0;      
        for k2=1:1:N2
            %%%%%%%%%%%% 1. Projection patterns I_k1k2
            absolute_phase=2*pi*f(id_f)*u/Width_img;
            phi_k1=2*(k1-1)*pi/N1; % external phase-shifting
            phi_k2=2*(k2-1)*pi/N2; % internal phase-shifting
            phase=absolute_phase+phi_k1+phi_k2; % + internal-external phase-shifting
            noise=B_noise*cos(order_noise*phase);               % 5th harmonics
            I_k1k2 = A + B*cos(phase)+noise;  % Projection patterns contaminated by 5th harmonics
            % Show the waves of projection patterns
            subplot(4,4,k2);plot(I_k1k2,'LineWidth',1.5,'Color',[7/255,193/255,96/255]); 
            title(['Projection Pattern: I_{k1=',num2str(k1),', ','k2=',num2str(k2),'}'],'FontSize',10,'FontName','Times New Roman');
            xlabel('Pixel Position u','FontSize',10,'FontName','Times New Roman');
            ylabel('Intensity','FontSize',10,'FontName','Times New Roman'); set(gca,'ytick',0:0.5:1); 
            %%%%%%%%%%%% 2. Camera images I_k1 (achievd by one exposure of camera)
            I_k1=I_k1+I_k1k2*Sk(k2);   % Sumperimposed intensity (achievd by one exposure of camera)
        end
        % 2D format of camera images. The image gray is normalized to [0,1]
        camera_img=repmat(I_k1/Total_Projecion_number,Height_img,1); 
        % Save the image for the following phase retrival and show
        imwrite(camera_img,[root_path,'Ours-',num2str(f(id_f)),'-',num2str(k1),'.bmp']); 
        subplot(4,4,13:16); plot(I_k1,'LineWidth',1.5,'Color',[192/255,0/255,0/255]);  % Wave of Camera images
        set(gca,'xtick',0:100:500);
        title([num2str(k1), '-th Camera Images generated by proposed method']);
        xlabel('Pixel Position u','FontSize',10,'FontName','Times New Roman');
        ylabel('Intensity','FontSize',10,'FontName','Times New Roman');
        figure; imshow(camera_img);  title([num2str(k1), '-th camera images generated by proposed method']);
    end
end

%%%%%%%%%%%% 二、Traditional repeated Projection method
for id_f=1:length(f)
    for k1=1:1:N1
        figure;   
        %%%%%%%%%%%% 1. Projection patterns I
        absolute_phase=2*pi*f(id_f)*u/Width_img; 
        phase=absolute_phase+2*(k1-1)*pi/N1;
        noise=B_noise*cos(order_noise*phase);
        I = A + B*cos(phase)+noise;  % Projection patterns contaminated by harmonics
        % Show the waves of projection patterns
        subplot(2,1,1);plot(I,'LineWidth',1.5,'Color',[7/255,193/255,96/255]);  set(gca,'ytick',0:0.5:1);          
        title(['Projection Pattern: I_{k1=',num2str(k1),',*}'],'FontSize',14,'FontName','Times New Roman');
        xlabel('Pixel Position u','FontSize',14,'FontName','Times New Roman');
        ylabel('Intensity','FontSize',14,'FontName','Times New Roman');
        %%%%%%%%%%%% 2. Camera images I_k1 (achievd by one exposure of camera)
        I_k1=I*Total_Projecion_number;        % Sumperimposed intensity (achievd by one exposure of camera)
        % 2D format of camera images. The image gray is normalized to [0,1]
        camera_img=repmat(I_k1/Total_Projecion_number,Height_img,1);
        % Save the image for the following phase retrival and show
        imwrite(camera_img,[root_path,'Traditional-',num2str(f(id_f)),'-',num2str(k1),'.bmp']);
        subplot(2,1,2); plot(I_k1,'LineWidth',1.5,'Color',[192/255,0/255,0/255]);  % Wave of Camera images
        title([num2str(k1), '-th camera images generated by traditional method'],'FontSize',14,'FontName','Times New Roman');
        xlabel('Pixel Position u','FontSize',15,'FontName','Times New Roman');
        ylabel('Intensity','FontSize',15,'FontName','Times New Roman'); set(gca,'ytick',0:50:100); ylim([0,120]);
        figure; imshow(camera_img); title([num2str(k1), '-th Camera Images generated by traditional method']);
    end
end

%%%%%%%%%%%% 三、Traditional 12-steps phase-shifting method(to caculate Groundtruth of phase)
N=12;
for id_f=1:length(f)
    for k1=1:1:N 
        %%%%%%%%%%%% 1. Projection patterns I
        absolute_phase=2*pi*f(id_f)*u/Width_img; 
        phase=absolute_phase+2*(k1-1)*pi/N;
        noise=B_noise*cos(order_noise*phase);
        I = A + B*cos(phase)+noise;  % Projection patterns contaminated by harmonics
        %%%%%%%%%%%% 2. Camera images I_k1 (achievd by one exposure of camera)
        I_k1=I*Total_Projecion_number;        % Sumperimposed intensity (achievd by one exposure of camera)
        % 2D format of camera images. The image gray is normalized to [0,1]
        camera_img=repmat(I_k1/Total_Projecion_number,Height_img,1);
        % Save the image for the following phase retrival
        imwrite(camera_img,[root_path,'Groundthruth-',num2str(f(id_f)),'-',num2str(k1),'.bmp']);
    end
end